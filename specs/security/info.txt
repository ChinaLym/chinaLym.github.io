一、什么是信息安全
      信息安全，简称信安，意为保护信息及信息系统免受未经授权的进入、使用、披露、破坏、修改、检视、记录及销毁。涉及计算机科学、网络技术、通信技术、密码技术、信息安全技术等多种综合性技术。主要包括以下五方面的内容，即需保证信息的保密性、真实性、完整性、未授权拷贝和所寄生系统的安全性。 网络环境下的信息安全体系是保证信息安全的关键，包括计算机安全操作系统、各种安全协议、安全机制（数字签名、消息认证、数据加密等），直至安全系统，如UniNAC、DLP等，只要存在安全漏洞便可以威胁全局安全。信息安全是指信息系统（包括硬件、软件、数据、人、物理环境及其基础设施）受到保护，不受偶然的或者恶意的原因而遭到破坏、更改、泄露，系统连续可靠正常地运行，信息服务不中断，最终实现业务连续性。

      信息安全是一个涉及范围非常广泛的概念，通常大家说到的网络安全、WEB安全、系统安全、数据安全等等，都属于信息安全的范畴。而且随着传统互联网->移动互联网->物联网的发展，信息安全的范围和概念也发生了较大的改变。随着物联网的发展，信息安全的概念已经不再局限于传统的互联网和网络安全，而是逐步扩展到整个物联网安全范畴。



二、信息安全涉及的范畴
      一个信息系统通常包含硬件、软件、数据、人、环境、基础设施、管理制度等，对应的信息安全涉及如下的范畴：

      1） 物理环境安全

            包括物理位置保护、物理访问控制、物理设备防盗防破坏、防雷、防火、防水防潮、防静电、温湿度控制、电力供应保障、电磁防护等方面

      2） 通信网络安全（网络层安全）

            包括网络架构安全、通信传输安全、可信验证等

      3） 区域边界安全

            包括边界防护、访问控制、可信验证、入侵防范、恶意代码防范、安全审计等

      4） 计算环境安全

            包括身份鉴别、访问控制、可信验证、入侵防范、恶意代码防范、数据完整性、数据机密性、数据备份与恢复、剩余信息保护、个人信息保护等

      5） 管理安全

            包括安全管理中心、安全管理制度、安全管理机构、安全管理人员、安全建设管理、安全运维管理等方面。

三、信息安全基本属性
      信息安全的核心都是围绕保护信息的几个基本安全属性来展开的，包括：

      1） 保密性（Confidentiality）

            即保证信息为授权者享用而不泄漏给未经授权者

      2） 完整性（Integrity）

            即保证信息从真实的发信者传送到真实的收信者手中，传送过程中没有被非法用户添加、删除、替换等

      3） 可用性（Availability）

            即保证信息和信息系统随时为授权者提供服务，保证合法用户对信息和资源的使用不会被不合理的拒绝

      4） 可控性（Controllability）

            即出于国家和机构的利益和社会管理的需要，保证管理者能够对信息实施必要的控制管理，以对抗社会犯罪和外敌侵犯

      5） 不可否认性（Non-Repudiation）

            即人们要为自己的信息行为负责，提供保证社会依法管理需要的公证、仲裁信息证据

四、信息安全的特点
整体性
      任何一个信息系统的安全问题都不是单独的、割裂的问题，信息系统的安全必须从整体层面综合考虑。

头痛医头，脚痛医脚，不能从根本上解决问题
一个局部上看天衣无缝，但从整体上考虑却可能漏洞百出
局部安全必须服从整体安全
系统中的安全问题是相互关联的，不可割裂单独考虑的
整体不安全，大于所有局部不安全之和
动态性
      安全过程是一个动态演化的过程。

系统内部的相互作用，是演化的内在根据和动力。例如，网络空间安全对抗的演化，就是攻防相互作用的结果。安全防御水平必须结合安全攻击水平的变化而动态变化。
系统与环境的相互作用，是系统演化的外部条件。例如在极端气象环境中，网络系统更容易向不安全方向演化。
开放性
      系统具有不断地与外界环境进行物质/能量/信息交换的性质和功能，系统像环境开放是系统得以向上发展的前提，也是系统得以稳定存在的条件。比如，必须不断对系统进行安全加固，才能确保在网络攻防中的优势地位。又比如安全算法必须向社会公开，经过足够的安全考验才值得信任。

相对性
      世界上没有绝对安全的系统。这是因为，安全是攻击与防御相互作用后得出的一种结果。只要耗费足够的攻击代价，系统都是可能被破解的。因此，一个相对安全的系统，是指在设定一定的安全等级前提下，其防御水平足以抵御同等级别的攻击能力。

      以密码算法为例，目前的密码算法都是以破解数学难题的代价太大来作为保障信息安全的前提的。但是随着量子技术的发展，密码算法破解已经是可行的，只是由于现阶段所付出的代价可能远远超出所能够获得的收益，但是对着量子技术的不断发展，将来当量子攻击成本足够低时，现有的密码学算法就不再安全了，因此现阶段这些算法只是相对安全。

      同样的道理，早期MD5/SHA1/DES算法也是相对安全的，但是这些年来对着技术的发展，这些算法逐一被破解或者易于破解，因此安全设计上不再认为他们是足够安全。

      因此，在设计一个安全系统时，并不是越安全越好。因为安全是需要成本和代价的，安全性越高意味着付出的成本越大。因此安全设计必须考虑性价比，在满足基本安全（例如行业约定的最低安全要求）的前提下，以最小的代价换取最大的安全性，就是所有安全设计这追求的目标。

      而且，在不同行业，不同业务场景，对安全的要求也都是不一样的，所需要付出的安全防御成本也是随之不同的。例如在金融领域，很多设备或系统都对硬件设备和物理安全提出了较高的安全要求，就是因为金融系统涉及到的都是公民的财产安全，而对于普通的消费电子设备，则安全要求不会提高到这种安全级别。因为任何一个行业的安全解决方案是否安全，也取决于该行业的安全规范和标准的要求，以及实际攻击者实施攻击的可能性和获益难度。

      需要注意的是，虽然安全是相对的，没有绝对安全的系统，但是不能从一个极端走向另一个机端，就此放弃安全防御。正确的做法是采取合理、必要的安全防御手段，以可接受的安全成本满足最大的安全目标要求。

五、信息安全常用设计原则
1 最小攻击面原则
      系统每增加一个功能特性就有可能会引入新的风险，通过安全开发可以减少攻击面进而达到控制系统整体风险的目的。

打个比方说，某在线web应用向用户提供了一个通过搜索来获取帮助的功能，如果后端代码没有正确实现该功能就有可能导致存在SQL注入漏洞，但是即便如此，我们还是有办法降低或消除风险的，比如：

该帮助功能只能被授权的用户使用。
后端代码对用户输入的数据进行了校验。
帮助功能不支持搜索，只支持查看。
      可以看到，以上的第一、二点收缩了攻击面，即增加了攻击条件，减少了可以攻击的人数，而第三点则完全避免了风险，即攻击面完全消除了。其中第三点符合“简化系统设计”的原则，即不增加不必要的功能模块和特性。

2 权限最小化原则
      最小权限也是安全设计的基本原则之一，最小权限原则要求系统只授予主体必要的权限，而不要过度授权，这样就能有效地减少系统、网络、应用、数据库出错的机会。

事物只拥有可以完成他们任务的最小权限，即不赋予不必要的权限。包括但不限于：用户权限和资源权限（比如可以使用的CPU、内存、网络流量和存储容量等等）。

比如，某中间件服务器只需要访问网络、读取数据库和向日志服务器写日志的权限，那就完全没有必要赋予其更多其它的权限（特别是管理级别的特权）。

又比如，某用户希望访问某服务器一个敏感的功能，该功能平时只开放给系统或者ROOT账户，这时候正确的做法是只为该用户单独设置此功能的权限，而不是直接把ROOT或者系统权限赋予该用户。

3 默认安全原则
      在软件领域的含义就是：让默认的配置和策略尽可能的安全。比如，在许多场合，安全和产品体验经常会发生冲突，这时候应当选择安全优先，在安全的前提下，可以允许通过手动关闭安全配置或策略来提升产品体验。

比如，产品应该默认打开密码复杂度策略，即不允许用户使用不符合密码复杂度策略的密码，但产品可能可以允许用户关闭这个策略来提升体验。

注：只有充分了解业务安全需求的前提下，才能更好的使用该原则。

4 纵深防御原则
      纵深防御包含两层含义：首先，要在各个不同层面、不同方面实施安全方案、避免出现疏忽，不同安全方案之间需要相互配合，构成一个整体；其次，要在正确的地方做正确的事情，即：在解决根本问题的地方实施针对性的安全方案。

5 失效安全原则
      即业务系统能够正确安全地处理各种异常和错误，即使再访问出错时，也不至于导致信息安全受到威胁。例如，在网页访问出错时，不能再错误日志中包含敏感信息。

6 不信任第三方系统原则
      不少产品需要和第三方的业务系统对接，并使用其提供的数据，但是一般情况下，我们是无法掌控这些第三方系统的安全设计和开发过程的，所以它们也可能会存在安全漏洞，进而被人攻击，因此，我们必须充分考虑到当第三方系统被攻击时，如何保障自己的业务系统的安全性。

 比如：当我们向第三方系统查询数据时，必须对数据进行有效性验证后才可以使用（比如使用这些数据进行数据库查询或显示到用户浏览器上）

7 业务隔离原则
      基本思想是将业务系统尽分成尽可能多的独立单元，但某个单元出现安全缺陷时，可以将损害程度降到最低，通俗地说，就是不要把所有鸡蛋都放在一个篮子里。

比如：将具有核心数据的业务和BBS部署在同一个服务器上，很多BBS站点都使用开源系统（比如discuz）搭建，经常爆出各种漏洞，一旦BBS被攻陷，将会威胁到核心业务数据的安全性。

注：隔离可以是系统内部功能模块之间的（比如：web服务器和数据库服务器等），也可以业务部署层面之间的（比如：BBS和核心业务）

8 公开设计原则
      有些人认为，只要产品内部的实现细节不被外人知道，那么产品就是安全的，但其实这是一种保护效果比较差的方法。当然，并不是说这样做毫无意义，也的确增加了攻击的难度，但是不能对其形成过多依赖，甚至把它当成主要或唯一的安全防护手段。

比如：不少公司都实现了自己的私有加密算法，他们认为只要算法不被泄露或公开，那么算法就是安全的，但实际面临以下问题：

攻击者可以通过抓包或逆向二进制来进行破解。
攻击者通过入侵服务器或给员工机器种植木马的方式来获取到源代码。
对公司不满的员工故意公开算法。
      一旦以上任意条件满足时，则这种不公开设计方式的保护也就变得没有意义，因此，正确地做法应该是：假设算法被破解或完全公开，同样能保证系统的安全。典型的案例诸如业界广泛使用的对称加密算法（AES）和非对称加密算法（RSA），它们的设计实现都是公开的，但是仍然是安全的。

9 简化系统设计原则
        “最小化攻击面”和“简化系统设计”原则是相辅相成的，由于复杂的系统设计会导致攻击面变宽，所以如果存在多种系统设计方案，则应尽量选择最简单的那种方案。

10 正确地修复漏洞
      一旦漏洞被发现和确认，首先要找到测试它的方法和弄清产生根因，对于产生漏洞的代码，需要确认该代码是否也在其它产品或版本上使用，即需要对漏洞进行完整地排查和修复

11 数据与代码分离原则
      数据与代码分离原则广泛适用于各种由于“注入”而引发的安全问题的场景。如XSS、SQL Injection、CRLF Injection、X-Path Injection等，此类问题可以根据“数据与代码分离原则”设计出真正安全的解决方案，因为该原则抓住了漏洞形成的本质原因。

12 不可预测性原则
      我们无法要求运行的系统完全没有漏洞，因此可采取让攻击失效的办法，大大提高攻击的门槛，经过实践检验，证明这个思路确实是有效的，即使无法修复code，但是如果能够使得攻击的方法无效，那么也可以算是成功的防御。

      不可预测原则可以巧妙地用在一些敏感数据上，该原则的的实现往往需要用到加密算法、随机数算法、哈希算法等。

13 柯克霍夫原则
      类似公开设计原则。

      密码学上的柯克霍夫原则（Kerckhoffs's principle，也称为柯克霍夫假说、公理、或定律）系由奥古斯特·柯克霍夫在19世纪提出：即使密码系统的任何细节已为人悉知，只要密匙（key，又称密钥或秘钥）未泄漏，它也应是安全的。 信息论的发明者克劳德·香农 [1]  则改成说：“敌人了解系统”，这样的说法则称为香农箴言。 它和传统上使用隐密的设计、实现、或其他等等来提供加密的隐晦式安全想法相对。

      依据柯克霍夫原则，大多数民用保密都使用公开的算法。

      埃里克·斯蒂芬·雷蒙则将它引伸到开放源代码软件，指软件设计不假设敌人会得到源代码，已经不可靠，因此，永无可信的封闭源码。反过来说，开放源码比封闭源码更安全。

      应用在信息安全领域，我们需要保证：安全方案设计时，尽可能以可以公开安全方案、安全算法、安全协议为目标，使得攻击者在获知所有设计资料和细节的情况下，仍然难以破解整个系统。当然，这个是追求的一个理想目标。实际实施时可能会受限于各种技术条件（例如成本考虑），无法完全遵照此原则进行。但是作为一个合格的安全设计者，必须首先尝试尽可能的满足此原则，实在无法满足的情况下再寻求其他解决方案。另外，在实际实施时，也不能机械的理解而成公开了设计方案/资料/源码就一定可以提高系统安全性，而是要保证不能以攻击者无法获取这些信息作为安全防御的前提，保证即使攻击者获知这些设计秘密也不足以破解系统。

14 木桶短板原则
      木桶原则是说一个水桶无论有多高，它盛水的高度取决于其中最低的那块木板。因此，也称为短板原则（法则）

      应用在信息安全领域，我们在对一个信息系统进行安全防御时，需要首先把精力重点放在弥补安全短板上，而不是放在巩固安全优势上（虽然也很重要）。 因为一个信息系统，只要一个弱点或漏洞别人利用，其他地方做的再安全可能也无济于事。



六、信息安全常用机制
1 加密机制
      加密机制对应数据保密性服务。加密是提高数据安全性的最简便方法。通过对数据进行加密，有效提高了数据的保密性，能防止数据在传输过程中被窃取。常用的加密算法有对称加密算法（例如DES/AES/SM4等算法）和非对称加密算法（如RSA/ECC/SM2等算法）。

2 数字签名机制
      数字签名机制对应认证（鉴别）服务。数字签名是有效的鉴别方法，利用数字签名计数可以实施用户身份认证和消息认证，它具有解决手法双方纠纷的能力，是认证（鉴别）服务最核心的技术。在数字签名技术的基础之上，为了鉴别软件的有效性，有产生了代码签名技术。常用的签名算法有RSA算法、DSA算法、ECC算法、SM2算法等等

3 访问控制机制
      访问控制机制对应访问控制服务。通过预先设定的规则对用户所访问的数据进行限制。通常情况下，首先是通过用户的用户名和口令进行验证，其次是通过用户角色、用户组等规则进行验证，最后用户才能访问相应的限制资源。一般的应用常使用基于用户角色的访问控制方式。

4 数据完整性机制
      数据完整性机制对应数据完整性服务。数据完整性的作用是为了避免数据在传输过程中受到干扰，同时防止数据在传输过程中被褚篡改，以提高数据传输完整性。通常可以使用单向加密算法对数据加密，生成唯一验证码，用以校验数据完整性。常用的加密算法有MD5和SHA

5 认证机制
      认证机制对应认证（鉴别）服务。认证的目的在于验证接收方所接收到的数据是否来源于所期望的发送方，通常可以使用数字签名来进行验证。常用算法有RSA算法、DSA算法、ECC算法、SM2算法等。

6 业务流填充机制
      也称为传输填充机制。业务流填充机制对应数据保密性服务。业务流填充机制通过在数据传输过程中传输随机数的方式，混淆真实的数据，加大数据破解的难度，提高数据的保密性。

7 路由控制机制
      路由访问机制对应访问控制服务。路由控制机制为数据发送方选择安全网络通信路径，避免发送方使用不安全路径发送数据，提高数据的安全性。

8 公证机制
      公证机制对应抗否认性服务。公证机制的作用在于解决收发双方的纠纷问题，确保两方利益不受损害。类似于显示生活中，合同双方签署合同的同时，需要将合同的第三份交由第三方公证机构进行公证。

















1. 用户密码安全
 1.1. 平台密码强弱规则
   将密码输入分为数字，小写字母，大写字母，特殊符号4类，等级分为4个等级，具体如下：

   1）等级0（风险密码）：密码长度小于8位，或者只包含4类字符中的任意一类，或者密码与用户名一样，或者密码是用户名的倒写。

   2）等级1（弱密码）：包含两类字符，且组合为（数字+小写字母）或（数字+大写字母），且长度大于等于8位。

   3）等级2（中密码）：包含两类字符，且组合不能为（数字+小写字母）和（数字+大写字母），且长度大于等于8位。

   4）等级3（强密码）：包含三类字符及以上，且长度大于等于8位。

   判断密码等级的代码（Javascript参考逻辑代码）
function getPwdRank(szPwd, szUser) {
      var iRank = 0;

      szPwd.match(/[a-z]/g) && iRank++;

      szPwd.match(/[A-Z]/g) && iRank++;

      szPwd.match(/[0-9]/g) && iRank++;

      szPwd.match(/[^a-zA-Z0-9]/g) && iRank++;

      iRank = (iRank > 3 ? 3 : iRank);

      if (szPwd.length < 8 || iRank === 1 || szPwd === szUser || szPwd === szUser.split("").reverse().join("")) {

          iRank = 0;

      }

      if (iRank === 2) {

         if ((szPwd.match(/[0-9]/g) && szPwd.match(/[a-z]/g)) || (szPwd.match(/[0-9]/g) && szPwd.match(/[A-Z]/g))) {

             iRank = 1;

         }

      }

      return iRank;

  }

 1.2. 用户激活
   当平台新增用户或者用户因忘记密码而进行密码重置时，为避免平台管理员掌握用户密码，用户首次登录平台时，需要先进行用户激活。用户激活成功后，才能登录平台正常使用。

 1.3. 密码最低强度限制
   平台支持设置用户密码最低强度限制：弱密码、中密码和强密码，默认是中密码。

   平台设置用户密码最低强度后，平台中用户的密码必须在选定最低安全级别及以上，如果平台中已经存在的用户密码不符合要求，则在用户下次登录后强制用户修改密码。

   注：平台设置用户密码最低强度后，当前已经登录成功且密码强度不符合要求的用户不进行强制下线的操作，待用户注销下次登录后强制用户修改密码。

 1.4. 密码过期时间
   平台支持设置用户密码过期时间：不过期、一个月、三个月、六个月、自定义天数（1~365，默认90），结合2.1、2.2章节设计，流程如下：



注：

（1）是否过期判断平台是否启用过期以及启用过期情况下判断密码是否过期。

（2）平台记录用户密码设置时间（用户激活或者修改密码时记录密码设置时间）。

（3）密码过期判断：根据系统当前时间、用户设置密码时间和平台设置的用户密码过期时间计算用户密码是否过期。

 1.5. 记住用户密码
   禁止客户端本地保存用户名和密码，容易泄露密码。而是通过向服务端请求自动登录的票据，客户端保存此票据。下次登录时，用该票据作为请求自动登录。流程如下：

（一）申请自动登录票据



 注：

（1）客户端根据登录成功后获取的TGC向CMS申请令牌。

（2）CMS产生自动登录票据，应该与登录客户端的MAC地址、IP地址关联绑定，同时设置该自动登录票据的失效时间。

（二）自动登录



注：

（1）客户端使用自动登录票据请求登录平台（登录协议中含本机的IP和MAC地址）。

（2）CMS验证自动登录票据的有效性（IP、MAC是否关联、登录票据是否过期）。

（3）CMS验证通过后，产生TGC发给客户端。客户端提取TGC，登录成功；否则提示登录失败（提示票据过期或者验证失败）。

 2. 设备密码安全
（1）设备密码强弱等级：等级0~3，具体分类等级见1.1。

（2）设备包括平台管理的编码设备、解码设备、存储设备、报警主机、视频综合平台、智能分析仪、动环主机以及其他需要登记密码的外设和扩展资源。

（3）设备列表支持根据设备密码强度过滤出符合条件的设备（设备信息中需要保存设备密码等级）。

（4） 如果设备登录密码强度为风险密码或弱密码，则在设备详情页警示用户（设备密码旁用红色字体标注密码等级，用以警示用户及时修改密码）。

（5）如果是单IP添加一台设备且其密码强度为风险密码或弱密码，则警示用户（设备密码旁用红色字体标注密码等级，用以警示用户及时修改密码）。

（6）如果是IP段批量添加设备且检测到设备密码强度为风险密码或弱密码，则警示用户（设备密码旁用红色字体标注密码等级，用以警示用户及时修改密码）。

（7）批量导入设备后，提示用户强密码、中密码、弱密码、风险密码分别有几个，并支持直接根据密码强度跳转到设备列表页面，直接过滤出该密码强度的设备。

（8）对于有风险的设备密码，平台只警示用户，但仍然允许用户输入与保存。因此为了不干扰用户添加设备的主要操作流程，设备密码强度的提示是在密码输入完成后以及设备添加完成后提示，而不是在输入过程中实时提示的。























1. 对称加密算法使用
  我们常用的对称加密算法是高级加密标准（Advanced Encryption Standard，AES），

  该标准有一些要素：密钥、加密模式、向量、填充模式等。标准本身是公开的，我们需要保护的是密钥以及针对不同特性的明文选用合适的加密模式。

  密钥长度至少128位，推荐使用256位。

1.1. 密码(口令)加解密
  密码（口令）包括设备密码、中间件（数据库、消息队列、缓存服务）访问密码等，使用AES对称加密算法对密码（口令）加密存储和传输。

  通常而言，密码（口令）的长度在8~32字节，使用AES算法加密时，最多2个分组，而且密码本身具有随机性，因此可以使用ECB模式。

  说明：

  1） 已经使用ECB模式对密码（口令）进行加解密的，不需要强制修改。

  2） 新开发实现，推荐使用CBC模式对密码（口令）进行加解密。

1.2. 私钥证书加解密
  服务实现https协议，需要私钥证书，私钥证书需要加密保存。

  私钥证书的格式是公开的，而且头尾带有固定标识，比如PEM格式的私钥：



—–BEGIN RSA PRIVATE KEY—–
MIICJjCCAdCgAwIBAgIBITANBgkqhkiG9w0BAQQFADCBqTELMAkGA1UEBhMCVVMx
………
1p8h5vkHVbMu1frD1UgGnPlOO/K7Ig/KrsU=
—–END RSA PRIVATE KEY—–



  AES算法对私钥证书文件加密时，产生多个分组，考虑到证书文件中有明显的固定标识，采用ECB模式是具有安全风险的（已知明文攻击，破解密钥）。因此禁止使用ECB模式对私钥证书加解密。

  说明：

  1） 禁止使用ECB模式对私钥证书加解密，对已使用ECB的实现，需要强制修改。

  2） 推荐使用GCM模式对私钥证书加解密。

1.3. 生物特征数据加解密
  生物特性数据包括人脸图片、人脸建模数据、指纹建模数据等。

  这些生物特性数据一般都比较大（超过1024字节），因此禁止使用ECB模式对人脸图片、人脸建模数据、指纹建模数据进行加解密。

  说明：

  1） 禁止使用ECB模式对人脸图片、人脸建模数据、指纹建模数据加解密，对已使用ECB的实现，需要强制修改。

  2） 推荐使用GCM模式对人脸图片、人脸建模数据、指纹建模数据加解密。

  人脸图片、人脸建模数据和指纹建模数据安全存储，参考《图片加密存储方案设计》。

1.4. 消息队列URL加解密
  消息队列URL中带有消息服务的用户名和密码，比如：

  amq://127.109.102.119:8023/topic_iac_devicechange/amqusername/amqpassword

  分析该消息队列URL，是由“固定标识+ip+port+队列名+用户名+密码”构成，前4部分很容易被攻击者推测出明文，采用ECB模式是具有安全风险的（已知明文攻击，破解密钥）。因此禁止使用ECB模式对消息队列URL加解密。

  继续分析前4部分内容长度，一般在32~64字节，分组加密时，会有2-4个分组。根据CBC模式的特点，是使用第一个分组的密文作为向量，也就是说后面1-3个分组加密时，攻击者可以获得向量、明文（已知明文）、密文，那么容易通过加密标准推测出密钥，进而推

  测出该消息队列URL中后面的用户名和密码。因此采用CBC模式加密整个消息队列URL也是具有安全风险的。应该仅对用户名和密码进行加密处理。

  说明：

  1） ECB模式和CBC模式对消息队列URL加解密都是有安全风险的，已使用ECB的实现，修改成CBC模式也是有安全问题的。

  2） 要求仅对消息队列URL中用户名和密码加密。

2. 非对称加密算法使用
  我们常用的非对称加密算法是RSA加密算法，该算法的密钥由公钥和私钥两部分构成，公钥可以向外部公开，私钥必须妥善保管（加密采用1.2章节的要求）。

  密钥长度至少2048位，推荐使用2048位。

2.1. 使用非对称加密算法传输敏感信息
  我们有一些场景下，可以采用非对称加密方式交互加密密钥，以web前端和web后端服务之间的通信为例，从web前端输入的信息是敏感信息，需要加密传输到web后端服务，参考方案如下：